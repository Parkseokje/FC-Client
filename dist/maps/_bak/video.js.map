{"version":3,"sources":["_bak/video.js"],"names":["requirejs","timer","timer2","timer_waiting_seconds","$","getVideoSettings","get","res","timer_logging_interval","stop","playTimeLogger","waiting_seconds","axios","params","delete","video_id","then","response","catch","error","console","log","course_list_id","training_user_id","all","wait_message","html","alert","deleteVideoLog","deleteSessionLog","ajax","spread","res1","res2","type","reload","video_duration","timer_played_seconds","url","plyr","done","video_total_played_seconds","total_played_seconds","data","showPlayBtn","video","sessionProgressStartLogger","course_id","success","sessionProgressEndLogger","endTimeLogger","location","href","next_url","msg","checkVideoDuration","floor","getDuration","video_container","video_item","removeClass","btn_play","setVideoPosY","img_height","getVideoItemHeight","css","el","Math","height","player_options","autoplay","player","setup","parent","attr","session_has_ended","addEventListener","event","pause","window","on","preventDefault"],"mappings":"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","file":"../../javascripts/_bak/video.js","sourcesContent":["/**\n * Created by parkseokje\n * 비디오 세션 학습\n * TODO\n * 1. vimeo 가 동작하지 않는다. requirejs 를 제거하면 비정상적이긴 하지만 동작한다. 이부분에 대해 추후 검토가 필요하다. (2017-01-04) \n */\n\n'use strict';\n\nrequirejs(\n    [      \n      'jquery',\n\t    'axios',\n\t    'plyr',    \n      'jqueryTimer',\n    ],\n    function ($, axios, plyr) {\n      var timer_logging_interval = 0, // log every 5 seconds\n          timer = null,\n\t\t      timer2 = null, // 비디오 시청 종료 후 다음 버튼을 누르도록 강요하는 타이머 \n          timer_played_seconds = 0,\n\t\t      timer_waiting_seconds = 0, // 다음버튼을 노출하는데 까지 대기하는 시간\n          player_options = {\n            autoplay: false,\n            debug: false\n          },          \n          player = plyr.setup($('.js-player'), player_options),\n          btn_play = $('.btn_play'),\n          video = $('.plyr__video-wrapper')[0],          \n          video_container = $('.video_section'),\n          video_item = $('.tmp_video'),\n          video_id = video_item.data('id'), // video 테이블의 id\n          video_total_played_seconds = video_item.data('total-play'), // 비디오 총 시청시간\n          next_url = btn_play.parent().attr('href'),\n          training_user_id = btn_play.data('training-user-id'),\n          course_id = btn_play.data('course-id'),\n          course_list_id = btn_play.data('course-list-id'),\n          video_duration = null, // 비디오 러닝타임\n          wait_message = $('.wait-message'),  \n          session_has_ended = false;\n\n\t\t$(function () {\n\t\t\tgetVideoSettings();\n\t\t});\n      \n      \t// 비디오 셋팅값을 조회한다.\n\t\tfunction getVideoSettings() {\n\t\t\t$.get(\"/video/settings\", function(res) {\n\n\t\t\t\ttimer_logging_interval = res.interval;\n\t\t\t\ttimer = $.timer(1000 * timer_logging_interval, playTimeLogger, true);\n        timer.stop();\n        \n\t\t\t\t// 비디오 종료 후 학습이력 초기화까지 대기하는 시간 \n\t\t\t\ttimer_waiting_seconds = res.waiting_seconds;\n\t\t\t});\n\t\t}\n\n\t\t// 세션 비디오 로그를 삭제한다.\n\t\tfunction deleteVideoLog () {\n        return axios.delete('/video/log', {\n          params: {\n            video_id: video_id,\n          }\n        })\n        .then(function (response) {\n        })\n        .catch(function (error) {\n          console.log(error);\n        });  \t\t\t\n\t\t}\n\n\t\t// 세션 로그를 삭제한다.\n\t\tfunction deleteSessionLog () {\n        return axios.delete('/session/log', {\n          params: {\n            training_user_id: training_user_id,\n            course_list_id: course_list_id,\n          }\n        })\n        .then(function (response) {\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n\t\t}\t\t\n\n\t\t// plyr [ready] event\n\t\tvideo.addEventListener('ready', function(event) {\n\n\t\t\t// 새로고침을 해도 타이머가 리셋되지 않는다.\n\t\t\t// 임시방편으로 정지시킴\n\t\t\ttimer.stop();\n\t\t\tsetVideoPosY();\n\n\t\t\t// 비디오 러닝타임을 체크한다.\n\t\t\tcheckVideoDuration(event.type);\n\n\t\t});\n\n\t\t// plyr [play] event\n\t\tvideo.addEventListener('play', function(event) {\n      \n\t\t\t// 세션시작로그\n\t\t\tsessionProgressStartLogger();\n\n\t\t\t// 비디오 러닝타임을 체크한다.\n\t\t\tcheckVideoDuration(event.type);\n\n\t\t\t// 타이머를 설정한다.\n\t\t\ttimer.reset(1000 * timer_logging_interval);\n\n\t\t});        \n\n\t\t// plyr [pause] event\n\t\tvideo.addEventListener('pause', function() {\n\t\t\t\n\t\t\t// console.info('video has paused');        \n\t\t\ttimer.pause();\n\t\t\tendTimeLogger();\n\t\t});\n\n\t\t// plyr [timeupdate] event\n\t\tvideo.addEventListener('timeupdate', function() {\n\t\t\t//console.log('timeupdate');\n\t\t});                \n\n\t\t// plyr [ended] event\n\t\tvideo.addEventListener('ended', function() {\n\t\t\t// console.log('ended');\n\t\t\ttimer.stop();\n\n\t\t\tshowPlayBtn (video_total_played_seconds + timer_logging_interval);\n\t\t\tendTimeLogger();\n\n\t\t\t// timer2 시작\n\t\t\tif (!session_has_ended)\n\t\t\t\ttimer2 = $.timer(1000 * 1, waitingTimeLogger, true);\n\t\t});\n\n\t\t/**\n\t\t * 정해진 시간 내에 다음 버튼을 누르지 않을 경우\n\t\t * 학습을 초기화 하는 타이머 컨트롤러\n\t\t */\n\t\tfunction waitingTimeLogger () {\n\t\t\t\n\t\t\ttimer_waiting_seconds -= 1;\n\t\t\twait_message.html(' ( ' + timer_waiting_seconds + ' 초 이내 클릭 )');\n\n\t\t\t// 세션과 비디오 로그를 삭제한다.\n\t\t\tif (timer_waiting_seconds === 0) {\n\t\t\t\ttimer2.stop();\n\t\t\t\talert('비디오를 재시청 해주시기 바랍니다.');\n\n\t\t\t\taxios.all([ deleteVideoLog(), deleteSessionLog() ])\n\t\t\t\t.then(axios.spread(function (res1, res2) {\n\t\t\t\t\tlocation.reload();\n\t\t\t\t}));\n\t\t\t}\t\t  \n\t\t}\n\n\t\t// 시청시간 로깅\n\t\tfunction playTimeLogger () {\n\n\t\t\ttimer_played_seconds += timer_logging_interval;\n\n\t\t\t$.ajax({   \n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: \"/video/log/playtime\",   \n\t\t\t\tdata: { \n          training_user_id: training_user_id, \n          video_id: video_id,\n          timer_played_seconds: timer_played_seconds, \n          video_duration: video_duration\n        }   \n\t\t\t}).done(function (res) { \n\t\t\tif (!res.success) {\n\t\t\t\tconsole.error(res.msg);\n\n\t\t\t\t// 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n\t\t\t\ttimer.stop();\n\t\t\t\tvideo.plyr.stop();\n\t\t\t} else {\n\t\t\t\t// console.info('logged (duration : ' + video_duration + ' / total played seconds : ' + res.total_played_seconds + ')');\n\t\t\t\ttimer_played_seconds = 0;\n\n\t\t\t\t// 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n\t\t\t\tvideo_total_played_seconds = res.total_played_seconds;\n\t\t\t\tshowPlayBtn (video_total_played_seconds);\n\t\t\t} \n\t\t\t});\n\n\t\t}\n\t\t\n\t\t// 세션 시작일시 로깅\n\t\tfunction sessionProgressStartLogger () {\n\n\t\t\t$.ajax({   \n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: \"/session/log/starttime\",\n\t\t\t\tdata: { training_user_id: training_user_id, course_id: course_id, course_list_id: course_list_id }   \n\t\t\t}).done(function (res) { \n\t\t\tif (!res.success) {\n\t\t\t\t// console.error(res.msg);\n\t\t\t\t// 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n\t\t\t\ttimer.stop();\n\t\t\t\tvideo.plyr.stop();            \n\t\t\t} else {\n\t\t\t\tsession_has_ended = res.hasEnded; // 세션 종료여부\n\t\t\t\t// console.info('세션 시작시간 기록');\n\t\t\t} \n\t\t\t});\n\n\t\t}\n\t\t\n\t\t// 세션 종료일시 로깅\n\t\tfunction sessionProgressEndLogger () {\n\n\t\t\t$.ajax({   \n        type: \"POST\",\n        url: \"/session/log/endtime\",\n        data: { training_user_id: training_user_id, course_id: course_id, course_list_id: course_list_id }\n\t\t\t}).done(function (res) { \n\t\t\tif (!res.success) {\n\t\t\t\tconsole.error(res.msg);\n\t\t\t\t// 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n\t\t\t\ttimer.stop();\n\t\t\t\tvideo.plyr.stop();                \n\t\t\t} else {\n\t\t\t\t// console.info('세션 종료시간 기록');\n\t\t\t\tlocation.href = next_url;\n\t\t\t} \n\t\t\t});\n\n\t\t}      \n\n\t\t// 비디오 시청 종료시간 로깅\n\t\tfunction endTimeLogger () {\n\n\t\t\t$.ajax({   \n        type: \"POST\",\n        url: \"/video/log/endtime\",   \n        data: { \n          video_id: video_id\n        }\n\t\t\t}).done(function (res) { \n\t\t\tif (!res.success) {\n\t\t\t\tconsole.error(res.msg);\n\t\t\t} else {\n\t\t\t\t// console.info('종료시간 기록!');\n\t\t\t} \n\t\t\t});\n\t\t\t\n\t\t}      \n\n\t\t// 비디오 재생시간이 존재하는지 여부 체크\n\t\tfunction checkVideoDuration (event_name) {\n\t\t\t\n\t\t\tvideo_duration = video.plyr.getDuration();\n\n\t\t\t// if (video_duration)\n\t\t\t// \tconsole.info('[' + event_name + '] duration : ' + video_duration);\n\t\t\t// else \n\t\t\t// \tconsole.info('[' + event_name + '] duration doesn\\'t exists');\n\t\t\t\n\t\t\t// 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n\t\t\tshowPlayBtn (video_total_played_seconds);\n\t\t}\n\n\t\t// 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n\t\tfunction showPlayBtn (total_played_seconds) {\n\t\t\tif (Math.floor(video_duration * 0.8) <= total_played_seconds) {\n\t\t\t\tbtn_play.removeClass('blind');\n\t\t\t}\n\t\t}\n\n\t\t$(window).bind('resize', function () {\n\t\t\t// console.info('video has resized.');\n\t\t\tsetVideoPosY();\n\t\t});\n\n\t\t// 비디오 수직위치를 지정한다.\n\t\tfunction setVideoPosY () {\n\t\t\tvar img_height = getVideoItemHeight(video_item);\n\t\t\tvideo_item.css('margin-top', '-' + img_height/2 + 'px');\n\t\t\tvideo_container.css('height', img_height + 'px');\n\t\t\tvideo_item.removeClass('blind');\n\n\t\t}    \n\n\t\t// 비디오 높이를 구한다.\n\t\tfunction getVideoItemHeight (el) {\n\t\t\treturn Math.floor(el.height());\n\t\t}        \n\n\t\t// 다음으로\n\t\tbtn_play.on('click', function (event) {\n\t\tevent.preventDefault();\n\n\t\t// 세션 종료로그를 기록한다.\n\t\tsessionProgressEndLogger();\n\t\t\n\t\t});      \n    \n    }\n);\n"]}