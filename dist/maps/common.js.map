{"version":3,"sources":["common.js"],"names":["window","define","download","require","axios","polyfill","Handlebars","$","res","data","list","length","marquee","duration","forEach","notice","append","id","title","direction","duplicated","gap","err","pauseOnHover","catch","filename","event","url","on","currentTarget","key","responseType","getAllUrlParams","response","console","log","queryString","split","location","search","slice","obj","i","paramNum","arr","v","paramValue","a","paramName","replace","toLowerCase","push","navigator","getOSName","OSName","appVersion","indexOf"],"mappings":"AAAA,YACAA,QAAOC,QAAQ,SAAU,QAAS,WAAY,aAAc,cAAe,iBAAkB,SAA7FD,EAMEA,EACAE,EACAC,GAqDA,MAvDAH,QAAOI,MAAQA,EAMbD,QAAA,eAAAE,WACAD,OAAAA,WACOE,EAGHC,EAAA,WAJJH,EAOMI,IAAAA,mBACED,KAAE,SAAFC,GAJAA,EAAIC,KAAKC,MAAQF,EAAIC,KAAKC,KAAKC,OAAS,IAOxCJ,EAAA,YAAYK,OAEZC,EAAAA,KAAAA,KAFoBC,QAAA,SAAAC,GAGpBR,EAAA,YAAAS,OAAA,wBAAAD,EAAAE,GAAA,KAAAF,EAAAG,MAAA,eAGAC,EAAAA,YAAWP,SAEXQ,SAAY,IARdC,IAAA,GAXNF,UAwBmBG,KAxBnBF,YAAA,EAFFG,cAAA,OA0BKC,MAAM,SAAUF,GAQbG,QAAAA,MAAaC,OAIjBC,EAAAA,gBAAKC,GAAA,QAFD,SAAAF,GAGJjB,EAAAA,gBAAM,IAHFgB,GAAAlB,EAAAmB,EAAAG,eAAApB,KAAA,WAAAL,IASFF,OAAAA,OATJyB,IAWGH,sBAAMf,MAXTqB,IAAAvB,EAAAmB,EAAAG,eAAApB,KAAA,QAMEsB,aAAc,SAShBC,KAAAA,SAAAA,GACE9B,EAAA+B,EAAAxB,KAAAgB,KALCD,MAAM,SAAAF,GAAA,MAAOY,SAAQC,IAAIb,QAW1BU,gBAAA,SAAAL,GAEE,GAAAS,GAAAT,EAAAA,EAAAU,MAAA,KAAA,GAAArC,OAAAsC,SAAAC,OAAAC,MAAA,GAGAC,IAGA,IAAAL,EAAA,CAEEA,EAAYM,EAAJL,MAAR,KAAA,EAKEM,KAAAA,GAFFC,GAAID,EAAJN,MAAA,KAEEM,EAAAA,EAAWE,EAAEL,EAAF7B,OAAX+B,IAAA,CAED,GAGGI,GANJC,EAAAH,EAAAF,GAAAL,MAAA,KAAIW,EAAYD,EAAE,GAAGE,QAAQ,UAAW,SAAUJ,GASlDG,MADAL,GAAAE,EAAAL,MAAA,GAAA,GACAQ,KAIIP,MAAgB,KAAAM,EAAA,IAAAA,EAAA,EAGhBN,GAAIO,EAAcP,cACnBK,EAAAA,EAAAI,cAGCT,EAAAO,IAEK,gBAAAP,GAAAO,KACLP,EAAAO,IAAAP,EAAAO,SAGD,KAAAL,EAEDF,EAAAO,GAAAG,KAAAL,GAILL,EAAAO,GAAAL,GAAAG,GAHKL,EAAIO,GAAaF,GAYvB,MAAIM,IAJNC,UAAW,WAQT,GAAAC,GAAA,YAAA,QAnEJ,IAAAF,UAAAG,WAAAC,QAAA,SAAAF,EAAA,YA7DF,IAAAF,UAAAG,WAAAC,QAAA,SAAAF,EAAA,UA6HmD,IAAzCF,UAAUG,WAAWC,QAAQ,SAAeF,EAAS,SACV,IAA3CF,UAAUG,WAAWC,QAAQ,WAAiBF,EAAS,SAEpDA","file":"../javascripts/common.js","sourcesContent":["'use strict';\nwindow.define(['jquery', 'axios', 'download', 'handlebars', 'es6-promise', 'jqueryMarquee'], function (\n  $,\n  axios,\n  download,\n  Handlebars\n) {\n  window.axios = axios;\n  // https://github.com/stefanpenner/es6-promise 참고\n  require('es6-promise').polyfill();\n  window.Handlebars = Handlebars;\n\n  $(function () {\n    // 공지사항 조회\n    axios\n      .get('/api/v1/notices')\n      .then(function (res) {\n        // console.log(res.data.list);\n        if (res.data.list && res.data.list.length > 0) {\n          $('.marquee').show();\n\n          res.data.list.forEach(notice => {\n            $('.marquee').append('<li><a href=\"/notice/' + notice.id + '\">' + notice.title + '</a></li>');\n          });\n\n          $('.marquee').marquee({\n            // duration in milliseconds of the marquee\n            duration: 5000,\n            // gap in pixels between the tickers\n            gap: 50,\n            // 'left' or 'right'\n            direction: 'up',\n            // true or false - should the marquee be duplicated to show an effect of continues flow\n            duplicated: true,\n            pauseOnHover: true\n          });\n        }\n      })\n      .catch(function (err) {\n        console.error(err);\n      });\n  });\n\n  $('#notice-file').on('click', function (event) {\n    event.preventDefault();\n\n    const filename = $(event.currentTarget).data('filename');\n\n    axios({\n      method: 'post',\n      url: '/api/v1/s3-download',\n      data: {\n        key: $(event.currentTarget).data('url')\n      },\n      responseType: 'blob'\n    })\n      .then(response => {\n        download(response.data, filename);\n      })\n      .catch(err => console.log(err));\n  });\n\n  return {\n    getAllUrlParams: function (url) {\n      // get query string from url (optional) or window\n      var queryString = url ? url.split('?')[1] : window.location.search.slice(1);\n\n      // we'll store the parameters here\n      var obj = {};\n\n      // if query string exists\n      if (queryString) {\n        // stuff after # is not part of query string, so get rid of it\n        queryString = queryString.split('#')[0];\n\n        // split our query string into its component parts\n        var arr = queryString.split('&');\n\n        for (var i = 0; i < arr.length; i++) {\n          // separate the keys and the values\n          var a = arr[i].split('=');\n\n          // in case params look like: list[]=thing1&list[]=thing2\n          var paramNum;\n          var paramName = a[0].replace(/\\[\\d*\\]/, function (v) {\n            paramNum = v.slice(1, -1);\n            return '';\n          });\n\n          // set parameter value (use 'true' if empty)\n          var paramValue = typeof a[1] === 'undefined' ? true : a[1];\n\n          // (optional) keep case consistent\n          paramName = paramName.toLowerCase();\n          paramValue = paramValue.toLowerCase();\n\n          // if parameter name already exists\n          if (obj[paramName]) {\n            // convert value to array (if still string)\n            if (typeof obj[paramName] === 'string') {\n              obj[paramName] = [obj[paramName]];\n            }\n            // if no array index number specified...\n            if (typeof paramNum === 'undefined') {\n              // put the value on the end of the array\n              obj[paramName].push(paramValue);\n            } else {\n              // if array index number specified...\n              // put the value at that index number\n              obj[paramName][paramNum] = paramValue;\n            }\n          } else {\n            // if param name doesn't exist yet, set it\n            obj[paramName] = paramValue;\n          }\n        }\n      }\n\n      return obj;\n    },\n\n    getOSName: function () {\n      var OSName = 'Unknown OS';\n\n      if (navigator.appVersion.indexOf('Win') !== -1) OSName = 'Windows';\n      if (navigator.appVersion.indexOf('Mac') !== -1) OSName = 'MacOS';\n      if (navigator.appVersion.indexOf('X11') !== -1) OSName = 'UNIX';\n      if (navigator.appVersion.indexOf('Linux') !== -1) OSName = 'Linux';\n\n      return OSName;\n    }\n  };\n});\n"]}