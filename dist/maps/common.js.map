{"version":3,"sources":["common.js"],"names":["window","define","require","$","axios","download","Handlebars","polyfill","list","then","res","data","marquee","show","forEach","notice","gap","append","id","title","pauseOnHover","console","duplicated","catch","filename","event","error","err","on","key","responseType","currentTarget","method","url","response","queryString","log","getAllUrlParams","split","location","search","slice","obj","arr","paramName","replace","i","length","paramNum","a","v","paramValue","toLowerCase","getOSName","navigator","OSName","appVersion","indexOf"],"mappings":"AAAA,YACAA,QAAOC,QAAPD,SAQEA,QACA,WACAE,aACAF,cALA,iBAOAG,SAAEA,EAAYC,EAAAC,EAAAC,GAyDV,MAxDFN,QAAAI,MAAAA,EAGIF,QAAA,eAAAK,WACAP,OAAAM,WAAaE,EALnBL,EAAE,WASQA,EAAAA,IAAE,mBACHM,KAFD,SAAAC,GAIEA,EAAAC,KAAFH,KAAcI,OAAQ,IACpBT,EAAA,YAAAU,OAEAH,EAAAC,KAAAH,KAAAM,QAAA,SAAAC,GACAC,EAAAA,YAJoBC,OAAA,wBAAAF,EAAAG,GAAA,KAAAH,EAAAI,MAAA,eAOpBhB,EAAA,YAAAS,SAEAQ,SAAAA,IAEHJ,IAAA,GAGDK,UAAA,KA1BNC,YAAA,EAqBUF,cAAc,OAYtBG,MAAMC,SAAaC,GAPfJ,QAAQK,MAAMC,OAYhBhB,EAAAA,gBAAMiB,GAAA,QAAA,SAAAH,GACJI,EAAAA,gBAEFC,IAAAA,GAAc3B,EAAAsB,EAAAM,eAAApB,KAAA,WAGZN,IATJ2B,OAWS,OAAAC,IAAA,sBAXTtB,MALFkB,IAAA1B,EAAAsB,EAAAM,eAAApB,KAAA,QAmBAmB,aAAO,SAEHrB,KAAA,SAAAyB,GACA7B,EAAI8B,EAAcF,KAAMA,KAExBV,MAAA,SAAAI,GAAA,MAAAN,SAAAe,IAAAT,QAIAU,gBAAA,SAAiBJ,GAEfE,GAAAA,GAAcA,EAAAA,EAAYG,MAAM,KAAK,GAArCtC,OAAAuC,SAAAC,OAAAC,MAAA,GAGAC,IAGE,IAAAP,EAAA,CANFA,EAAcA,EAAYG,MAAM,KAAK,EAajC,KAAA,GAFFK,GAAIC,EAAYN,MAAKO,KAEnBC,EAAA,EAAAA,EAAAH,EAAAI,OAAAD,IAAA,CANF,GAGIE,GAHAC,EAAIN,EAAIG,GAAGR,MAAM,KAYrBM,EAAAK,EAAA,GAAAJ,QAAA,UAAA,SAAAK,GAEAC,MADAP,GAAYA,EAAAA,MAAAA,GAAUQ,GACtBD,KAIEA,MAAA,KAAAF,EAAA,IAAAA,EAAA,EAGCL,GAAAA,EAAAQ,cACDD,EAAAA,EAAAC,cAGEV,EAAIE,IAEJ,gBAAAF,GAAAE,KACAF,EAAAE,IAAAF,EAAAE,SAGG,KAAAI,EAELN,EAAIE,GAAaO,KAAAA,GAJfT,EAAIE,GAAWI,GAAYG,GAYrCE,EAAWT,GAAAO,GAKT,MAAIG,IAGJD,UAAOE,WACR,GAAAA,GAAA,YADC,QAjIN,IAAAD,UAAAE,WAAAC,QAAA,SAAAF,EAAA,YA6HmD,IAAzCD,UAAUE,WAAWC,QAAQ,SAAeF,EAAS,UACZ,IAAzCD,UAAUE,WAAWC,QAAQ,SAAeF,EAAS,SACV,IAA3CD,UAAUE,WAAWC,QAAQ,WAAiBF,EAAS,SAEpDA","file":"../javascripts/common.js","sourcesContent":["'use strict';\nwindow.define([\n  'jquery',\n  'axios',\n  'download',\n  'handlebars',\n  'es6-promise',\n  'jqueryMarquee'\n], function ($, axios, download, Handlebars) {\n  window.axios = axios;\n  // https://github.com/stefanpenner/es6-promise 참고\n  require('es6-promise').polyfill();\n  window.Handlebars = Handlebars;\n\n  $(function () {\n    // 공지사항 조회\n    axios.get('/api/v1/notices')\n      .then(function (res) {\n        // console.log(res.data.list);\n        if (res.data.list.length > 0) {\n          $('.marquee').show();\n\n          res.data.list.forEach(notice => {\n            $('.marquee').append('<li><a href=\"/notice/' + notice.id + '\">' + notice.title + '</a></li>');\n          });\n\n          $('.marquee').marquee({\n            // duration in milliseconds of the marquee\n            duration: 5000,\n            // gap in pixels between the tickers\n            gap: 50,\n            // 'left' or 'right'\n            direction: 'up',\n            // true or false - should the marquee be duplicated to show an effect of continues flow\n            duplicated: true,\n            pauseOnHover: true\n          });\n        }\n      })\n      .catch(function (err) {\n        console.error(err);\n      });\n  });\n\n  $('#notice-file').on('click', function (event) {\n    event.preventDefault();\n\n    const filename = $(event.currentTarget).data('filename');\n\n    axios({\n      method: 'post',\n      url: '/api/v1/s3-download',\n      data: {\n        key: $(event.currentTarget).data('url')\n      },\n      responseType: 'blob'\n    })\n      .then(response => {\n        download(response.data, filename);\n      })\n      .catch(err => console.log(err));\n  });\n\n  return {\n    getAllUrlParams: function (url) {\n      // get query string from url (optional) or window\n      var queryString = url ? url.split('?')[1] : window.location.search.slice(1);\n\n      // we'll store the parameters here\n      var obj = {};\n\n      // if query string exists\n      if (queryString) {\n        // stuff after # is not part of query string, so get rid of it\n        queryString = queryString.split('#')[0];\n\n        // split our query string into its component parts\n        var arr = queryString.split('&');\n\n        for (var i = 0; i < arr.length; i++) {\n          // separate the keys and the values\n          var a = arr[i].split('=');\n\n          // in case params look like: list[]=thing1&list[]=thing2\n          var paramNum;\n          var paramName = a[0].replace(/\\[\\d*\\]/, function (v) {\n            paramNum = v.slice(1, -1);\n            return '';\n          });\n\n          // set parameter value (use 'true' if empty)\n          var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\n\n          // (optional) keep case consistent\n          paramName = paramName.toLowerCase();\n          paramValue = paramValue.toLowerCase();\n\n          // if parameter name already exists\n          if (obj[paramName]) {\n            // convert value to array (if still string)\n            if (typeof obj[paramName] === 'string') {\n              obj[paramName] = [obj[paramName]];\n            }\n            // if no array index number specified...\n            if (typeof paramNum === 'undefined') {\n              // put the value on the end of the array\n              obj[paramName].push(paramValue);\n            } else {\n              // if array index number specified...\n              // put the value at that index number\n              obj[paramName][paramNum] = paramValue;\n            }\n          } else {\n            // if param name doesn't exist yet, set it\n            obj[paramName] = paramValue;\n          }\n        }\n      }\n\n      return obj;\n    },\n\n    getOSName: function () {\n      var OSName = 'Unknown OS';\n\n      if (navigator.appVersion.indexOf('Win') !== -1) OSName = 'Windows';\n      if (navigator.appVersion.indexOf('Mac') !== -1) OSName = 'MacOS';\n      if (navigator.appVersion.indexOf('X11') !== -1) OSName = 'UNIX';\n      if (navigator.appVersion.indexOf('Linux') !== -1) OSName = 'Linux';\n\n      return OSName;\n    }\n  };\n});\n"]}