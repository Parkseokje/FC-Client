{"version":3,"sources":["video_pc.js"],"names":["window","requirejs","timerLogPlayedSeconds","showPlayBtn","totalPlayedSeconds","Math","floor","videoDuration","passiveRate","btnPlayNext","removeClass","btnReplayVideo","videoPlayTimeLogger","videoEndTimeLogger","console","res","success","type","url","data","video_id","videoId","done","error","msg","course_list_id","log","$","ajax","timerLog","trainingUserId","player","courseId","courseListId","sessionHasEnded","sessionProgressEndLogger","stop","location","href","nextUrl","deleteVideoLog","axios","delete","params","catch","deleteSessionLog","event","timerWaitingSeconds","waitMessage","playerContainer","videoLastPlayedTime","aquaWindow","videoTotalPlayedSeconds","Timer","aquaHtml5","secondTimer","Util","getOSName","show","initPlayer","on","sessionProgressStartLogger","info","timerLoggingInterval","alert","all","startValues","seconds","html","getTimeValues","toString","addEventListener","e","preventDefault","addClass","then","spread","res1","res2","reload","unload"],"mappings":"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","file":"../javascripts/video_pc.js","sourcesContent":["'use strict';\n\nwindow.requirejs(\n  [\n    'common',\n    'Vimeo',\n    'easyTimer',\n    'jqueryTimer'\n  ],\nfunction (Util, Vimeo, Timer) {\n  var $ = $ || window.$;\n  var player = null;\n  var playerContainer = $('.videoplayer');\n  var timerLoggingInterval = playerContainer.data('interval'); // log every 5 seconds\n  var timerLog = null;\n  var timerWait = null; // 비디오 시청 종료 후 다음 버튼을 누르도록 강요하는 타이머\n  var timerLogPlayedSeconds = 0; // 시청시간(초)\n  var timerWaitingSeconds = playerContainer.data('wait-seconds'); // 다음버튼을 노출하는데 까지 대기하는 시간\n  var passiveRate = playerContainer.data('passive-rate'); // 다음 버튼을 노출하는 시점\n  var videoDuration = null; // 비디오 러닝타임\n  var waitMessage = $('#countdown .values'); // $('.wait-message');\n  var sessionHasEnded = false;\n  var videoCurrentTime; // 비디오 현재 시청시간\n\n  // element cache\n  var btnPlayNext = $('#btn_play_next');\n  var nextUrl = btnPlayNext.parent().attr('href');\n  var btnReplayVideo = $('#btn_replay_video');\n\n  // element data\n  var videoId = playerContainer.data('id'); // video 테이블의 id\n  var videoTotalPlayedSeconds = playerContainer.data('total-play'); // 비디오 총 시청시간\n  var videoLastPlayedTime = playerContainer.data('current-time'); // 마지막 재생시점\n  var trainingUserId = btnPlayNext.data('training-user-id');\n  var courseId = btnPlayNext.data('course-id');\n  var courseListId = btnPlayNext.data('course-list-id');\n  var aquaHtml5 = $('#aqua_html5');\n  var aquaWindow = $('#aqua_window');\n\n  var secondTimer = new Timer();\n\n/**\n * entry point\n */\n  $(function () {\n    // initPlayer();\n\n    var os = Util.getOSName;\n\n    if (os === 'Windows') {\n      aquaWindow.show();\n    } else {\n      aquaHtml5.show();\n    }\n  });\n\n  /**\n   * Player 를 초기화 한다.\n   */\n  function initPlayer () {\n    var options = {\n      loop: false\n    };\n    player = new Vimeo('videoplayer', options);\n    player.setVolume(0.5); // 볼륨설정\n    player.ready().then(function () {\n      console.info('Player is ready.');\n\n      player.getDuration().then(function (duration) {\n        console.log('duration : ', duration);\n\n        videoDuration = duration; // 비디오 지속시간 구하기\n        setPlayer();\n      }).catch(function (error) {\n        console.error(error);\n      });\n\n      if (videoLastPlayedTime < videoDuration - 5) {\n        if (window.confirm('마지막 재생시점으로 이동하시겠습니까?')) {\n          player.setCurrentTime(videoLastPlayedTime).then(function (seconds) {\n            player.pause();\n          }).catch(function (error) {\n            console.error(error);\n          });\n        }\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n\n    // player.enableTextTrack('ko').then(function (track) {\n    //   track.language = 'kr';\n    //   track.kind = 'subtitles';\n    //   track.label = 'hahaha';\n    // })\n    // .catch(function (error) {\n    //   console.log('track : ' + error);\n    // });\n  }\n\n  /**\n   * Player 를 셋팅한다.\n   */\n  function setPlayer () {\n    if (videoDuration) {\n      timerLog = $.timer(1000 * timerLoggingInterval, videoPlayTimeLogger, true);\n      timerLog.stop();\n      checkVideoDuration();\n    } else {\n      console.error('재생시간을 확인할 수 없습니다.');\n    }\n  }\n\n  /**\n   * 비디오 재생시간이 존재하는지 여부 체크\n   */\n  function checkVideoDuration () {\n  // videoDuration = getPlayerDuration();\n  // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n    showPlayBtn(videoTotalPlayedSeconds);\n  }\n\n  /**\n   * 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n   */\n  function showPlayBtn (totalPlayedSeconds) {\n    if (Math.floor(videoDuration * (passiveRate / 100)) <= totalPlayedSeconds) {\n      btnPlayNext.removeClass('blind');\n      btnReplayVideo.addClass('blind');\n    }\n  }\n\n  /**\n   * 시청시간 로깅\n   */\n  function videoPlayTimeLogger () {\n    console.log('logging...');\n    timerLogPlayedSeconds += timerLoggingInterval;\n\n    player.getCurrentTime().then(function (seconds) {\n      if ((videoCurrentTime > 0) && videoCurrentTime === seconds) {\n        player.pause().then(function () {\n          console.log('비디오가 중지되었습니다.');\n          btnReplayVideo.removeClass('blind');\n        }).catch(function (error) {\n          console.error(error);\n        });\n        return;\n      }\n      videoCurrentTime = seconds;\n      $.ajax({\n        type: 'POST',\n        url: '/video/log/playtime',\n        data: {\n          training_user_id: trainingUserId,\n          video_id: videoId,\n          played_seconds: timerLogPlayedSeconds,\n          video_duration: videoDuration,\n          currenttime: seconds\n        }\n      }).done(function (res) {\n        if (!res.success) {\n          console.error(res.msg);\n\n          // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n          player.pause().then(function () {\n          }).catch(function (error) {\n            console.error(error);\n          });\n        } else {\n          timerLogPlayedSeconds = 0;\n          // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n          videoTotalPlayedSeconds = res.total_played_seconds;\n          showPlayBtn(videoTotalPlayedSeconds);\n        }\n      });\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  /**\n   * 비디오 시청 종료시간 로깅\n   */\n  function videoEndTimeLogger () {\n    console.log('video log end');\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/endtime',\n      data: {\n        video_id: videoId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n      // console.info('종료시간 기록!');\n      }\n    });\n  }\n\n  /**\n   * 세션 시작일시 로깅\n   */\n  function sessionProgressStartLogger () {\n    console.log('session log start');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/starttime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        sessionHasEnded = res.hasEnded; // 세션 종료여부\n      }\n    });\n  }\n\n  /**\n   * 세션 종료일시 로깅\n   */\n  function sessionProgressEndLogger () {\n    console.log('session log end');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/endtime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        // console.info('세션 종료시간 기록');\n        window.location.href = nextUrl;\n      }\n    });\n  }\n\n  /**\n   * 정해진 시간 내에 다음 버튼을 누르지 않을 경우\n   * 학습을 초기화 하는 타이머 컨트롤러\n   */\n  function waitingTimeLogger () {\n    timerWaitingSeconds -= 1;\n    waitMessage.html(' ( ' + timerWaitingSeconds + ' 초 이내 클릭 )');\n\n    // 세션과 비디오 로그를 삭제한다.\n    if (timerWaitingSeconds <= 0) {\n      timerWait.stop();\n      window.alert('비디오를 재시청 해주시기 바랍니다.');\n\n      axios.all([ deleteVideoLog(), deleteSessionLog() ])\n        .then(axios.spread(function (res1, res2) {\n          window.location.reload();\n        }));\n    }\n  }\n\n  /**\n   * 세션 비디오 로그를 삭제한다.\n   */\n  function deleteVideoLog () {\n    return axios.delete('/video/log', {\n      params: {\n        video_id: videoId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  // 세션 로그를 삭제한다.\n  function deleteSessionLog () {\n    return axios.delete('/session/log', {\n      params: {\n        training_user_id: trainingUserId,\n        course_list_id: courseListId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n/**\n * 다음버튼 클릭 시 발생 이벤트\n */\n  btnPlayNext.on('click', function (event) {\n    event.preventDefault();\n\n    secondTimer.stop();\n    // 세션 종료로그를 기록한다.\n    sessionProgressEndLogger();\n  });\n\n  /**\n   * Player 재생 시 발생\n   */\n  player.on('play', function (data) {\n    // secondTimer.reset();\n    // 세션시작로그\n    sessionProgressStartLogger();\n    // 로깅 시간간격 설정\n    timerLog.reset(1000 * timerLoggingInterval);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('error', function (data) {\n    console.info('error!');\n    console.error(data);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('pause', function (data) {\n    console.info('player: pause');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n  });\n\n/**\n * Player 종료 시 발생\n */\n  player.on('ended', function (data) {\n    console.info('player: ended');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 총 시청시간에 따라 다음 버튼 표시\n    showPlayBtn(videoTotalPlayedSeconds + timerLoggingInterval);\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n    // 세션 종료 시 대기 타이머 시작\n    if (!sessionHasEnded) {\n      setTimeout(function () {\n        // timerWait = $.timer(1000 * 1, waitingTimeLogger, true);\n\n        $('.timer').removeClass('blind');\n\n        console.log('second timer started');\n        secondTimer.start({countdown: true, startValues: {seconds: 30}});\n\n        waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n\n        secondTimer.addEventListener('secondsUpdated', function (e) {\n          waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n        });\n\n        secondTimer.addEventListener('targetAchieved', function (e) {\n          waitMessage.html('학습 초기화 중입니다..');\n\n          setTimeout(function () {\n            window.alert('30초 동안 다음 버튼을 누르지 않아 학습을 초기화 하였습니다.\\n\\n재시청 해주시기 바랍니다.');\n\n            axios.all([ deleteVideoLog(), deleteSessionLog() ])\n            .then(axios.spread(function (res1, res2) {\n              window.location.reload();\n            }));\n          }, 3000);\n        });\n      }, 1000);\n    }\n  });\n\n  btnReplayVideo.on('click', function (e) {\n    e.preventDefault();\n    player.unload().then(function () {\n      btnReplayVideo.addClass('blind');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n});\n"]}